1. Subclass of Thread to define run method

public class testThread {

    public static void main(String[] args){
        WorkThread th = new WorkThread();
        System.out.println("Main thread:"+Thread.currentThread().getName());//this is main thread
        th.start(); //Thread start is used to start a new Thread and call the Thread run method. The main thread will not blocked to wait new Thread done
        //if use th.run() here, it turns out to call a normal method of run of WorkThread, which is still run under the main thread.
    }

    //inner static class
    static class WorkThread extends Thread{
        public void run(){
            try {
                System.out.println("thread start to run:"+Thread.currentThread().getName());
                sleep(1000);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}


2. Pass runnable object to a thread

public class testThread {

    public static void main(String[] args){
        WorkRunable runable = new testThread().new WorkRunable(0);
        System.out.println("Main thread:"+Thread.currentThread().getName());
        new Thread(runable).start(); //call start to create a new thread
    }

    //inner class
    class WorkRunable implements Runnable{
        int value;
        int max = 10000;
        public WorkRunable(int value){
            this.value = value;
        }
        public void run(){
            System.out.println("thread start to run:"+Thread.currentThread().getName());
            
            while (this.value<max)
                this.value++;
        }
    }
}

3. Difference between process and thread
 - all used to realize mitilple task
 - each process has differernt address space, while threads in a process share the same address space
 - process is heavry weight, while thread is light weight
 - it is easy for threads communication
 - a process can contain multiple threads
 - thread is the smallest unit to run
 - each thread has its' call stack
 - each time only one thread run
 
 
 4. State of thread
  new, runnable, not-runnable(blocked), terminated
  
   new: call thread.start() to create a thread
   runnable: when thread resource is ready
   not-runnable: 
   
5. Methods
 join: wait the thread to completed the task
 
 
 7. Thread pool
  - A group of thread created to improve performance
  
  ExecutorService threadPool = Executors.newCachedThreadPool();
  threadPool.execute(new WorkThread());
  
  static class WorkThread implements Runnable{
       public void run(){
            System.out.println("after work thread wake up for:"+Thread.currentThread().getName());
        }
    }
    
  8 notify, wait
   Thread.sleep() will not release the lock for an object
   notify, wait, notfiyAll are methods from Object. Used to control a object in multiple thread environment
   
   
    static List<String> q = new ArrayList<String>();
    final static int max = 5;
    
    public static void main(String[] args) throws InterruptedException{
        ExecutorService threadpool = Executors.newCachedThreadPool();
        threadpool.execute(new Producer());
        threadpool.execute(new Consumer());
        
    }
    
    
    static class Producer implements Runnable{
        public void run(){
            while(true){
                synchronized(q){
                    System.out.println("producer come into synchronized");
                    if(q.size()==max){
                        System.out.println("producer max wait now");
                        try {
                            q.wait();
                        } catch (InterruptedException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    }
                    else{
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        q.add("s");
                        q.notify();
                        System.out.println("producer add one to queue");
                    }
                }
            }
        }
    }
  
    static class Consumer implements Runnable{
        public void run(){
            while(true){
                synchronized(q){
                    System.out.println("Consumer come into synchronized");
                    if(q.size()==0){
                        System.out.println("Consumer queue size=0");
                        try {
                            q.wait();
                        } catch (InterruptedException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    }
                    else{
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        q.remove(0);
                        q.notify();
                        System.out.println("Consumer remove one to queue");
                    }
                }
            }
        }
    }

